import Head from "next/head";
import { useState } from "react";
import { Container, Button, Collapse } from "react-bootstrap";

import Header from "../components/Header";

import { FaqQuesSymbol } from "../components/icons/CycloneSymbol";

type props = {
  answer: string;
  question: string;
};

type question = {
  id: number;
  answer: any;
  question: string;
};

const questions: Array<question> = [
  {
    id: 1,
    question: "What is ctrlX?",
    answer:
      "ctrlX is a money streaming protocol available on the Polygon blockchain including bundled solutions from other blockchain protocols (you will need to hyperlink to the source code here). ctrlX protocol allows per-second transactions between ctrlX users",
  },

  {
    id: 2,
    question: "What is real-time finance?",
    answer:
      "The DeFi term to emphasize the wide-ranging use cases for the ctrlX protocol which allows you to create money streams. Similar to streaming a work or services, ctrlX lets you stream money or payments in real-time.",
  },

  {
    id: 3,
    question: "What is money streaming?",
    answer: (
      <p>
        Just like you can stream movies on Netflix or music on Spotify, so you
        can stream money by the second on ctrlX.
        <br />
        Money streams can be used in many different ways: rental property,
        consulting, one-time work on your garden or house, freelance, lawyer
        services and etc.
      </p>
    ),
  },

  {
    id: 4,
    question: "How does streaming work on ctrlX?",
    answer: (
      <p>
        Imagine a salary worth 5,000 DAI paid by Alice to Bob over the whole
        month of January.
        <ol>
          <li>
            Alice makes the 5,000 DAI deposit in the ctrlX contract before Jan
            1, setting the stop time to Feb 1.
          </li>
          <li> Every second beginning Jan 1 makes Bob richer. </li>
          <li>On Jan 10, Bob will have earned approximately 1,000 DAI.</li>
          <li>
            If at any point during January, Alice wishes to recover her money,
            she can cancel the stream and recover what has not been streamed
            yet.
          </li>
        </ol>
      </p>
    ),
  },
];

const Item = ({ answer, question }: props) => {
  const [open, setOpen] = useState(false);

  return (
    <div className="text-white my-4 p-2 faq-container">
      <Button
        variant="transparent"
        onClick={() => setOpen(!open)}
        className="w-100 text-left text-white mb-2"
      >
        <FaqQuesSymbol
          width={20}
          height={20}
          fill="#FFFFFFe9"
          className="mx-lg-4 mx-2"
          style={{ transform: open ? "rotate(90deg)" : null }}
        />
        {question}
      </Button>
      <Collapse in={open}>
        <div className="my-2 collapse-answer">{answer}</div>
      </Collapse>
    </div>
  );
};

const Faq = () => {
  return (
    <>
      <Head>
        <title>ctrlX | FAQ</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        <Header active="FAQ" />
        <Container className="max-container px-2 mb-lg-2">
        <h1 className="my-4 py-4 gradient-heading">
          Frequently Asked Questions
        </h1>
        {questions.map((ques) => (
          <Item key={ques.id} question={ques.question} answer={ques.answer} />
        ))}

        <div className="text-white my-4 p-2 px-5 faq-container">
          <Button
            variant="transparent"
            className="w-100 text-left text-white mb-2 mx-lg-4 mx-3"
            style={{ cursor: "text" }}
          >
            This section will be updated in accordance with the{" "}
            <a className="link-info">roadmap</a>
          </Button>
        </div>
      </Container>
    </>
  );
};

export default Faq;
